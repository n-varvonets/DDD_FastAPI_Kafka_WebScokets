from abc import ABC
from dataclasses import dataclass, field
from datetime import datetime
from uuid import uuid4

@dataclass(eq=False)  # eq=False предотвращает автоматическую генерацию метода __eq__
class BaseEntity(ABC):
    oid: str = field(
        default_factory=lambda: str(uuid4()),  # Генерация уникального идентификатора для объекта
        kw_only=True
    ) # поле может быть установлено только через именованный аргумент.
    #  Это означает, что при инициализации объекта данного класса нельзя передавать значение для этого поля
    #  как позиционный аргумент — оно должно быть передано исключительно через ключевое слово (именованный аргумент).
    created_at: datetime = field(
        default_factory=datetime.now,  # Автоматическая установка текущей даты/времени создания объекта
        kw_only=True
    )

    def __hash__(self) -> int:
        """
        Переопределение метода __hash__ необходимо для того, чтобы экземпляры этого класса можно было
        использовать в коллекциях, таких как set и dict, которые зависят от хэш-значений. Мы используем
        значение `oid` (уникальный идентификатор), чтобы генерировать хэш.

        - В данном случае используется поле oid, которое является уникальным для каждого экземпляра,
          и на основе его значения генерируется хэш.
        - Это необходимо для того, чтобы экземпляры этого класса можно было использовать в коллекциях,
          таких как set и dict, которые зависят от хэш-значений объектов.

        Переопределение метода __hash__ гарантирует, что разные объекты с одинаковым oid будут считаться одинаковыми.
        """
        return hash(self.oid)

    def __eq__(self, __value: "BaseEntity") -> bool:
        """
        Переопределение метода __eq__ позволяет правильно сравнивать два объекта класса BaseEntity.
        Два объекта считаются равными, если их идентификаторы (`oid`) совпадают. Это полезно,
        когда объекты сравниваются, например, в списках или множествах.

        - В данном случае объекты считаются равными, если их oid (уникальные идентификаторы) совпадают.

        По умолчанию объекты Python сравниваются по их идентификаторам в памяти, что не всегда полезно.
        Переопределение метода __eq__ позволяет сравнивать объекты по значимым полям, например,
        по уникальному идентификатору (oid), а не по их расположению в памяти.
        """
        if isinstance(__value, BaseEntity):
            return self.oid == __value.oid
        return False


########################################
######### Пример использования #########
########################################
# entity1 = BaseEntity()
# entity2 = BaseEntity(oid=entity1.oid)
#
# # Сравнение объектов
# print(entity1 == entity2)  # True, потому что идентификаторы (oid) совпадают
#
# # Использование в множестве
# entities = {entity1, entity2}
# print(len(entities))  # 1, потому что объекты с одинаковыми oid считаются одинаковыми
